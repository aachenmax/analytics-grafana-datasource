{"version":3,"sources":["../src/datasource.js"],"names":["_","convertFilterValueToProperType","ATTRIBUTE","AGGREGATION","QUERY_INTERVAL","BitmovinAnalyticsDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","jsonData","apiKey","tenantOrgId","length","basicAuth","options","query","buildQueryParameters","targets","filter","t","hide","when","data","getAdhocFilters","adhocFilters","targetResponsePromises","map","target","metric","COUNT","dimension","LICENSE_KEY","resultFormat","interval","HOUR","licenseKey","license","start","range","from","toISOString","end","to","filters","operator","value","percentileValue","groupBy","limit","doRequest","method","resultTarget","alias","refId","Promise","all","then","targetResponses","datapoints","response","result","rows","row","config","orderBy","getLicenses","status","message","title","datasourceRequest"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport {convertFilterValueToProperType, ATTRIBUTE} from './types/queryAttributes';\nimport { AGGREGATION } from './types/aggregations';\nimport { QUERY_INTERVAL } from './types/intervals';\n\nexport class BitmovinAnalyticsDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n\n    this.headers = {\n      'Content-Type': 'application/json',\n      'X-Api-Key': instanceSettings.jsonData.apiKey,\n    };\n\n    const tenantOrgId = instanceSettings.jsonData.tenantOrgId;\n    if (typeof tenantOrgId === 'string' && tenantOrgId.length > 0) {\n      this.headers['X-Tenant-Org-Id'] = tenantOrgId;\n    }\n\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    if (this.templateSrv.getAdhocFilters) {\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    } else {\n      query.adhocFilters = [];\n    }\n\n    let targetResponsePromises = _.map(query.targets, target => {\n      target.metric = target.metric || AGGREGATION.COUNT;\n      target.dimension = target.dimension || ATTRIBUTE.LICENSE_KEY;\n      target.resultFormat = target.resultFormat || 'time_series';\n      target.interval = target.interval || QUERY_INTERVAL.HOUR;\n\n      var data = {\n        licenseKey: target.license,\n        dimension: target.dimension,\n        start: options.range.from.toISOString(),\n        end: options.range.to.toISOString(),\n        filters: _.map(target.filter, filter => {\n          return {\n            name: filter.name,\n            operator: filter.operator,\n            value: convertFilterValueToProperType(filter)\n          }\n        })\n      };\n\n      if (target.metric === 'percentile') {\n        data['percentile'] = target.percentileValue;\n      }\n\n      if (target.resultFormat === 'time_series') {\n        data['interval'] = target.interval;\n      } else if (target.resultFormat === 'table'){\n        data['groupBy'] = target.groupBy;\n        data['limit'] = target.limit;\n      }\n\n      return this.doRequest({\n        url: this.url + '/analytics/queries/' + target.metric,\n        data: data,\n        method: 'POST',\n        resultTarget: target.alias || target.refId,\n        resultFormat: target.resultFormat\n      });\n    });\n\n    return Promise.all(targetResponsePromises).then(targetResponses => {\n      return {\n        data: _.map(targetResponses, response => {\n          var datapoints = _.map(response.data.data.result.rows, row => {\n            return [row[1], row[0]]; // value, timestamp\n          });\n\n          if (response.config.resultFormat === 'time_series') {\n            datapoints = _.orderBy(datapoints, [1], 'asc')\n          }\n\n          return {\n            target: response.config.resultTarget,\n            datapoints: datapoints\n          };\n        })\n      };\n    });\n  }\n\n  testDatasource() {\n    return this.getLicenses().then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n\n  }\n\n  metricFindQuery(query) {\n\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    return options;\n  }\n\n  getLicenses() {\n    return this.doRequest({\n      url: this.url + '/analytics/licenses',\n      method: 'GET',\n    });\n  }\n}\n"]}