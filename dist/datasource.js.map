{"version":3,"sources":["../src/datasource.js"],"names":["_","convertFilterValueToProperType","ATTRIBUTE","AGGREGATION","calculateAutoInterval","QUERY_INTERVAL","transform","ResultFormat","BitmovinAnalyticsDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","jsonData","apiKey","tenantOrgId","length","basicAuth","options","query","buildQueryParameters","targets","filter","t","hide","when","data","getAdhocFilters","adhocFilters","targetResponsePromises","map","target","metric","COUNT","dimension","LICENSE_KEY","resultFormat","TIME_SERIES","interval","HOUR","filters","operator","value","licenseKey","license","start","range","from","toISOString","end","to","percentileValue","AUTO","intervalMs","limit","groupBy","doRequest","method","resultTarget","alias","refId","Promise","all","then","result","targetResponses","series","response","getLicenses","status","message","title","datasourceRequest"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport {convertFilterValueToProperType, ATTRIBUTE} from './types/queryAttributes';\nimport { AGGREGATION } from './types/aggregations';\nimport {calculateAutoInterval, QUERY_INTERVAL} from './types/intervals';\nimport { transform } from './result_transformer';\nimport { ResultFormat } from './types/resultFormat';\n\nexport class BitmovinAnalyticsDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n\n    this.headers = {\n      'Content-Type': 'application/json',\n      'X-Api-Key': instanceSettings.jsonData.apiKey,\n    };\n\n    const tenantOrgId = instanceSettings.jsonData.tenantOrgId;\n    if (typeof tenantOrgId === 'string' && tenantOrgId.length > 0) {\n      this.headers['X-Tenant-Org-Id'] = tenantOrgId;\n    }\n\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n    const query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    if (this.templateSrv.getAdhocFilters) {\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    } else {\n      query.adhocFilters = [];\n    }\n\n    const targetResponsePromises = _.map(query.targets, target => {\n      target.metric = target.metric || AGGREGATION.COUNT;\n      target.dimension = target.dimension || ATTRIBUTE.LICENSE_KEY;\n      target.resultFormat = target.resultFormat || ResultFormat.TIME_SERIES;\n      target.interval = target.interval || QUERY_INTERVAL.HOUR;\n\n      const filters = _.map(target.filter, filter => {\n        return {\n          name: filter.name,\n          operator: filter.operator,\n          value: convertFilterValueToProperType(filter)\n        }\n      });\n      const data = {\n        licenseKey: target.license,\n        dimension: target.dimension,\n        start: options.range.from.toISOString(),\n        end: options.range.to.toISOString(),\n        filters\n      };\n\n      if (target.metric === 'percentile') {\n        data['percentile'] = target.percentileValue;\n      }\n\n      if (target.resultFormat === ResultFormat.TIME_SERIES) {\n        data['interval'] = target.interval === QUERY_INTERVAL.AUTO ? calculateAutoInterval(options.intervalMs) : target.interval;\n      } else if (target.resultFormat === 'table'){\n        data['limit'] = target.limit;\n      }\n      data['groupBy'] = target.groupBy;\n\n      return this.doRequest({\n        url: this.url + '/analytics/queries/' + target.metric,\n        data: data,\n        method: 'POST',\n        resultTarget: target.alias || target.refId,\n        resultFormat: target.resultFormat\n      });\n    });\n\n    return Promise.all(targetResponsePromises).then(targetResponses => {\n      let result = [];\n      _.map(targetResponses, response => {\n        const series = transform(response, options);\n        result = [...result, ...series];\n      });\n      return {\n        data: result\n      };\n    });\n  }\n\n  testDatasource() {\n    return this.getLicenses().then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n\n  }\n\n  metricFindQuery(query) {\n\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    return options;\n  }\n\n  getLicenses() {\n    return this.doRequest({\n      url: this.url + '/analytics/licenses',\n      method: 'GET',\n    });\n  }\n}\n"]}