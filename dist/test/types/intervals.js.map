{"version":3,"sources":["../../../src/types/intervals.js"],"names":["QUERY_INTERVAL","SECOND","MINUTE","HOUR","DAY","MONTH","AUTO","QUERY_INTERVAL_LIST","Object","keys","map","key","calculateAutoInterval","intervalMs","intervalToMilliseconds","interval"],"mappings":";;;;;;AAAO,IAAMA,cAAc,GAAG;AAC5BC,EAAAA,MAAM,EAAE,QADoB;AAE5BC,EAAAA,MAAM,EAAE,QAFoB;AAG5BC,EAAAA,IAAI,EAAE,MAHsB;AAI5BC,EAAAA,GAAG,EAAE,KAJuB;AAK5BC,EAAAA,KAAK,EAAE,OALqB;AAM5BC,EAAAA,IAAI,EAAE;AANsB,CAAvB;;AAQA,IAAMC,mBAAmB,GAAGC,MAAM,CAACC,IAAP,CAAYT,cAAZ,EAA4BU,GAA5B,CAAgC,UAAAC,GAAG;AAAA,SAAIX,cAAc,CAACW,GAAD,CAAlB;AAAA,CAAnC,CAA5B;;;AAEA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,UAAD,EAAgB;AACnD,MAAIA,UAAU,IAAI,IAAlB,EAAwB;AACtB,WAAOb,cAAc,CAACC,MAAtB;AACD,GAFD,MAEO,IAAIY,UAAU,GAAG,KAAjB,EAAwB;AAC7B,WAAOb,cAAc,CAACE,MAAtB;AACD,GAFM,MAEA,IAAIW,UAAU,IAAI,KAAd,IAAuBA,UAAU,GAAG,MAAxC,EAAgD;AACrD,WAAOb,cAAc,CAACG,IAAtB;AACD,GAFM,MAEA,IAAIU,UAAU,IAAI,MAAd,IAAwBA,UAAU,GAAG,OAAzC,EAAkD;AACvD,WAAOb,cAAc,CAACI,GAAtB;AACD,GAFM,MAEA;AACL,WAAOJ,cAAc,CAACK,KAAtB;AACD;AACF,CAZM;AAcP;;;;;;;;;AAKO,IAAMS,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,QAAD,EAAc;AAClD,UAAOA,QAAP;AACE,SAAKf,cAAc,CAACC,MAApB;AACE,aAAO,IAAP;;AACF,SAAKD,cAAc,CAACE,MAApB;AACE,aAAO,OAAK,EAAZ;;AACF,SAAKF,cAAc,CAACG,IAApB;AACE,aAAO,OAAK,EAAL,GAAQ,EAAf;;AACF,SAAKH,cAAc,CAACI,GAApB;AACE,aAAO,OAAK,EAAL,GAAQ,EAAR,GAAW,EAAlB;;AACF,SAAKJ,cAAc,CAACK,KAApB;AACE,aAAO,OAAK,EAAL,GAAQ,EAAR,GAAW,EAAX,GAAc,EAArB;;AACF;AACE,aAAO,CAAC,CAAR;AAZJ;AAcD,CAfM","sourcesContent":["export const QUERY_INTERVAL = {\n  SECOND: 'SECOND',\n  MINUTE: 'MINUTE',\n  HOUR: 'HOUR',\n  DAY: 'DAY',\n  MONTH: 'MONTH',\n  AUTO: 'AUTO'\n};\nexport const QUERY_INTERVAL_LIST = Object.keys(QUERY_INTERVAL).map(key => QUERY_INTERVAL[key]);\n\nexport const calculateAutoInterval = (intervalMs) => {\n  if (intervalMs <= 1000) {\n    return QUERY_INTERVAL.SECOND;\n  } else if (intervalMs < 60000) {\n    return QUERY_INTERVAL.MINUTE;\n  } else if (intervalMs >= 60000 && intervalMs < 604800) {\n    return QUERY_INTERVAL.HOUR;\n  } else if (intervalMs >= 604800 && intervalMs < 2592000) {\n    return QUERY_INTERVAL.DAY;\n  } else {\n    return QUERY_INTERVAL.MONTH;\n  }\n}\n\n/**\n * Get corresponding interval in milliseconds.\n * @param {String} interval The interval\n * @returns {number} Interval in milliseconds or -1 if unknown.\n */\nexport const intervalToMilliseconds = (interval) => {\n  switch(interval) {\n    case QUERY_INTERVAL.SECOND:\n      return 1000;\n    case QUERY_INTERVAL.MINUTE:\n      return 1000*60;\n    case QUERY_INTERVAL.HOUR:\n      return 1000*60*60;\n    case QUERY_INTERVAL.DAY:\n      return 1000*60*60*24;\n    case QUERY_INTERVAL.MONTH:\n      return 1000*60*60*24*30;\n    default:\n      return -1;\n  }\n};\n"],"file":"intervals.js"}