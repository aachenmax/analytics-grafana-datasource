{"version":3,"sources":["../../src/datasource.js"],"names":["BitmovinAnalyticsDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","jsonData","apiKey","tenantOrgId","length","basicAuth","options","query","buildQueryParameters","targets","filter","t","hide","when","data","getAdhocFilters","adhocFilters","targetResponsePromises","_","map","target","metric","AGGREGATION","COUNT","dimension","ATTRIBUTE","LICENSE_KEY","resultFormat","interval","QUERY_INTERVAL","HOUR","licenseKey","license","start","range","from","toISOString","end","to","filters","operator","value","percentileValue","doRequest","method","resultTarget","alias","refId","Promise","all","then","targetResponses","datapoints","response","result","rows","row","config","orderBy","getLicenses","status","message","title","datasourceRequest"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport {convertFilterValueToProperType, ATTRIBUTE} from './types/queryAttributes';\nimport { AGGREGATION } from './types/aggregations';\nimport { QUERY_INTERVAL } from './types/intervals';\n\nexport class BitmovinAnalyticsDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n\n    this.headers = {\n      'Content-Type': 'application/json',\n      'X-Api-Key': instanceSettings.jsonData.apiKey,\n    };\n\n    const tenantOrgId = instanceSettings.jsonData.tenantOrgId;\n    if (typeof tenantOrgId === 'string' && tenantOrgId.length > 0) {\n      this.headers['X-Tenant-Org-Id'] = tenantOrgId;\n    }\n\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    if (this.templateSrv.getAdhocFilters) {\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    } else {\n      query.adhocFilters = [];\n    }\n\n    let targetResponsePromises = _.map(query.targets, target => {\n      target.metric = target.metric || AGGREGATION.COUNT;\n      target.dimension = target.dimension || ATTRIBUTE.LICENSE_KEY;\n      target.resultFormat = target.resultFormat || 'time_series';\n      target.interval = target.interval || QUERY_INTERVAL.HOUR;\n\n      var data = {\n        licenseKey: target.license,\n        dimension: target.dimension,\n        start: options.range.from.toISOString(),\n        end: options.range.to.toISOString(),\n        filters: _.map(target.filter, filter => {\n          return {\n            name: filter.name,\n            operator: filter.operator,\n            value: convertFilterValueToProperType(filter)\n          }\n        })\n      };\n\n      if (target.metric === 'percentile') {\n        data['percentile'] = target.percentileValue;\n      }\n\n      if (target.resultFormat === 'time_series') {\n        data['interval'] = target.interval;\n      }\n\n      return this.doRequest({\n        url: this.url + '/analytics/queries/' + target.metric,\n        data: data,\n        method: 'POST',\n        resultTarget: target.alias || target.refId,\n        resultFormat: target.resultFormat\n      });\n    });\n\n    return Promise.all(targetResponsePromises).then(targetResponses => {\n      return {\n        data: _.map(targetResponses, response => {\n          var datapoints = _.map(response.data.data.result.rows, row => {\n            return [row[1], row[0]]; // value, timestamp\n          });\n\n          if (response.config.resultFormat === 'time_series') {\n            datapoints = _.orderBy(datapoints, [1], 'asc')\n          }\n\n          return {\n            target: response.config.resultTarget,\n            datapoints: datapoints\n          };\n        })\n      };\n    });\n  }\n\n  testDatasource() {\n    return this.getLicenses().then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n\n  }\n\n  metricFindQuery(query) {\n\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    return options;\n  }\n\n  getLicenses() {\n    return this.doRequest({\n      url: this.url + '/analytics/licenses',\n      method: 'GET',\n    });\n  }\n}\n"]}