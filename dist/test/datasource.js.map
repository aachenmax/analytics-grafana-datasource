{"version":3,"sources":["../../src/datasource.js"],"names":["BitmovinAnalyticsDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","jsonData","apiKey","tenantOrgId","length","basicAuth","options","query","buildQueryParameters","targets","filter","t","hide","when","data","getAdhocFilters","adhocFilters","targetResponsePromises","_","map","target","metric","AGGREGATION","COUNT","dimension","ATTRIBUTE","LICENSE_KEY","resultFormat","ResultFormat","TIME_SERIES","interval","QUERY_INTERVAL","HOUR","filters","operator","value","orderBy","e","order","licenseKey","license","start","range","from","toISOString","end","to","percentileValue","AUTO","intervalMs","groupBy","Number","limit","undefined","doRequest","method","resultTarget","alias","refId","Promise","all","then","result","targetResponses","series","response","getLicenses","status","message","title","datasourceRequest"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport {convertFilterValueToProperType, ATTRIBUTE} from './types/queryAttributes';\nimport { AGGREGATION } from './types/aggregations';\nimport {calculateAutoInterval, QUERY_INTERVAL} from './types/intervals';\nimport { transform } from './result_transformer';\nimport { ResultFormat } from './types/resultFormat';\n\nexport class BitmovinAnalyticsDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n\n    this.headers = {\n      'Content-Type': 'application/json',\n      'X-Api-Key': instanceSettings.jsonData.apiKey,\n    };\n\n    const tenantOrgId = instanceSettings.jsonData.tenantOrgId;\n    if (typeof tenantOrgId === 'string' && tenantOrgId.length > 0) {\n      this.headers['X-Tenant-Org-Id'] = tenantOrgId;\n    }\n\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n    const query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    if (this.templateSrv.getAdhocFilters) {\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    } else {\n      query.adhocFilters = [];\n    }\n\n    const targetResponsePromises = _.map(query.targets, target => {\n      target.metric = target.metric || AGGREGATION.COUNT;\n      target.dimension = target.dimension || ATTRIBUTE.LICENSE_KEY;\n      target.resultFormat = target.resultFormat || ResultFormat.TIME_SERIES;\n      target.interval = target.interval || QUERY_INTERVAL.HOUR;\n\n      const filters = _.map(target.filter, filter => {\n        return {\n          name: filter.name,\n          operator: filter.operator,\n          value: convertFilterValueToProperType(filter)\n        }\n      });\n      const orderBy = _.map(target.orderBy, e => ({name: e.name, order: e.order}));\n      const data = {\n        licenseKey: target.license,\n        dimension: target.dimension,\n        start: options.range.from.toISOString(),\n        end: options.range.to.toISOString(),\n        filters,\n        orderBy\n      };\n\n      if (target.metric === 'percentile') {\n        data['percentile'] = target.percentileValue;\n      }\n\n      if (target.resultFormat === ResultFormat.TIME_SERIES) {\n        data['interval'] = target.interval === QUERY_INTERVAL.AUTO ? calculateAutoInterval(options.intervalMs) : target.interval;\n      }\n      data['groupBy'] = target.groupBy;\n      data['limit'] = Number(target.limit) || undefined;\n\n      return this.doRequest({\n        url: this.url + '/analytics/queries/' + target.metric,\n        data: data,\n        method: 'POST',\n        resultTarget: target.alias || target.refId,\n        resultFormat: target.resultFormat\n      });\n    });\n\n    return Promise.all(targetResponsePromises).then(targetResponses => {\n      let result = [];\n      _.map(targetResponses, response => {\n        const series = transform(response, options);\n        result = [...result, ...series];\n      });\n      return {\n        data: result\n      };\n    });\n  }\n\n  testDatasource() {\n    return this.getLicenses().then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n\n  }\n\n  metricFindQuery(query) {\n\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    return options;\n  }\n\n  getLicenses() {\n    return this.doRequest({\n      url: this.url + '/analytics/licenses',\n      method: 'GET',\n    });\n  }\n}\n"]}