{"version":3,"sources":["../../src/datasource.js"],"names":["BitmovinAnalyticsDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","jsonData","apiKey","tenantOrgId","length","basicAuth","options","query","buildQueryParameters","targets","filter","t","hide","when","data","getAdhocFilters","adhocFilters","targetResponsePromises","_","map","target","metric","dimension","resultFormat","interval","licenseKey","license","start","range","from","toISOString","end","to","filters","operator","value","convertFilterValueToProperType","percentileValue","doRequest","method","resultTarget","alias","refId","Promise","all","then","targetResponses","datapoints","response","result","rows","row","config","orderBy","getLicenses","status","message","title","datasourceRequest","parseInt"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class BitmovinAnalyticsDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n\n    this.headers = {\n      'Content-Type': 'application/json',\n      'X-Api-Key': instanceSettings.jsonData.apiKey,\n    };\n\n    if (typeof instanceSettings.tenantOrgId === 'string' && instanceSettings.tenantOrgId.length > 0) {\n      this.headers['X-Tenant-Org-Id'] = instanceSettings.tenantOrgId;\n    }\n\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    if (this.templateSrv.getAdhocFilters) {\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    } else {\n      query.adhocFilters = [];\n    }\n\n    let targetResponsePromises = _.map(query.targets, target => {\n      target.metric = target.metric || 'count';\n      target.dimension = target.dimension || 'LICENSE_KEY';\n      target.resultFormat = target.resultFormat || 'time_series';\n      target.interval = target.interval || 'MINUTE';\n\n      var data = {\n        licenseKey: target.license,\n        dimension: target.dimension,\n        start: options.range.from.toISOString(),\n        end: options.range.to.toISOString(),\n        filters: _.map(target.filter, filter => {\n          return {\n            name: filter.name,\n            operator: filter.operator,\n            value: this.convertFilterValueToProperType(filter)\n          }\n        })\n      };\n\n      if (target.metric === 'percentile') {\n        data['percentile'] = target.percentileValue;\n      }\n\n      if (target.resultFormat === 'time_series') {\n        data['interval'] = target.interval;\n      }\n\n      return this.doRequest({\n        url: this.url + '/analytics/queries/' + target.metric,\n        data: data,\n        method: 'POST',\n        resultTarget: target.alias || target.refId,\n        resultFormat: target.resultFormat\n      });\n    });\n\n    return Promise.all(targetResponsePromises).then(targetResponses => {\n      return {\n        data: _.map(targetResponses, response => {\n          var datapoints = _.map(response.data.data.result.rows, row => {\n            return [row[1], row[0]]; // value, timestamp\n          });\n\n          if (response.config.resultFormat === 'time_series') {\n            datapoints = _.orderBy(datapoints, [1], 'asc')\n          }\n\n          return {\n            target: response.config.resultTarget,\n            datapoints: datapoints\n          };\n        })\n      };\n    });\n  }\n\n  testDatasource() {\n    return this.getLicenses().then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n\n  }\n\n  metricFindQuery(query) {\n\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    return options;\n  }\n\n  getLicenses() {\n    return this.doRequest({\n      url: this.url + '/analytics/licenses',\n      method: 'GET',\n    });\n  }\n\n  convertFilterValueToProperType(filter) {\n    switch(filter.name) {\n      case 'IS_LIVE':\n      case 'IS_CASTING':\n      case 'IS_MUTED': return filter.value === 'true';\n      case 'PLAYER_STARTUPTIME':\n      case 'VIDEO_STARTUPTIME':\n      case 'CLIENT_TIME':\n      case 'VIDEOTIME':\n      case 'VIDEOTIME':\n      case 'STARTUPTIME':\n      case 'PAGE_LOAD_TIME': return parseInt(filter.value, 10);\n      default: return filter.value\n    }\n  }\n}\n"]}